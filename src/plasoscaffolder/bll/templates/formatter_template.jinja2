# -*- coding: utf-8 -*-
"""{{ plugin_name|replace('_',' ')}} database formatter."""

from plaso.formatters import interface
from plaso.formatters import manager
from plaso.lib import errors

{% for query in queries %}
class {{ class_name }}{{ query.Name }}Formatter(interface.ConditionalEventFormatter):
  """{{ plugin_name|replace('_',' ')}} {{ query.Name|lower }} event formatter."""

  DATA_TYPE = u'{{ plugin_name|lower|replace('_',':')}}:{{ query.Name|lower }}'

  """Correct Format String Pieces where needed"""
  FORMAT_STRING_PIECES = [
    {% for column in query.Columns %}u'{{ column.ColumnAsDescription() }}{{ ':{' }}{{ column.ColumnAsSnakeCase() }}{{ '}' }}'{% if not loop.last %},{% endif %}
    {% endfor %}]

  #TODO: add Format String Pieces for the short Format
  FORMAT_STRING_SHORT_PIECES = []

  SOURCE_LONG = u'{{ plugin_name|replace('_',' ')|title }} {{ query.Name|title }}'
  SOURCE_SHORT = u'{{ plugin_name|replace('_',' ')|title }}'

  {% if query.NeedsCustomizing %}#TODO: Replace constant _REPLACEWITHATTRIBUTENAME with the attribute to customize and add values
  _REPLACEWITHATTRIBUTENAME = {}{% endif %}
{% if query.NeedsCustomizing %}
  def GetMessages(self, unused_formatter_mediator, event):
    """Determines the formatted message strings for an event object.

    Args:
      formatter_mediator (FormatterMediator): mediates the interactions between
          formatters and other components, such as storage and Windows EventLog
          resources.
      event (EventObject): event.

    Returns:
      tuple(str, str): formatted message string and short message string.

    Raises:
      WrongFormatter: if the event object cannot be formatted by the formatter.
    """
    if self.DATA_TYPE != event.data_type:
      raise errors.WrongFormatter(u'Unsupported data type: {0:s}.'.format(
          event.data_type))

    event_values = event.CopyToDict()

    #TODO replace variable replace_with_attribute_name with the attribute to customize
    replace_with_attribute_name = event_values.get(u'replace_with_attribute_name', None)
    if replace_with_attribute_name is not None:
      event_values[u'replace_with_attribute_name'] = (
          self._REPLACEWITHATTRIBUTENAME.get(replace_with_attribute_name, u'UNKNOWN'))

    return self._ConditionalFormatMessages(event_values)
{% endif %}{% endfor %}

manager.FormattersManager.RegisterFormatter([
  {% for query in queries %}{{ class_name }}{{ query.Name }}Formatter{% if not loop.last %},{% endif %}
  {% endfor %}])