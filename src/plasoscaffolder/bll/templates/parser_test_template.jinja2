# -*- coding: utf-8 -*-
"""Tests for {{ plugin_name|replace('_',' ')}} plugin."""
import unittest

from plaso.lib import eventdata
from plaso.lib import timelib
from plaso.parsers.sqlite_plugins import {{ plugin_name }}

from tests import test_lib as shared_test_lib
from tests.parsers.sqlite_plugins import test_lib


class {{ class_name }}Test(test_lib.SQLitePluginTestCase):
  """Tests for {{ plugin_name|replace('_',' ')}} database plugin."""

  @shared_test_lib.skipUnlessHasTestFile([u'{{ database_name }}'])
  def testProcess(self):
    """Test the Process function on a {{ plugin_name|replace('_',' ')|title}} file."""
    plugin_object = {{ plugin_name }}.{{ class_name }}Plugin()
    storage_writer = self._ParseDatabaseFileWithPlugin(
        [u'{{ database_name }}'], plugin_object)

    # We should have {{ count_events }} events in total.
    {% for query in queries %}{% for column in query.TimestampColumns|sort(attribute='SQLColumn') %}
    # - {{ query.AmountEvents }} {{ query.Name }} {{ column.SQLColumn }} events.
    {% endfor %}{% endfor %}
    self.assertEqual({{ count_events }}, len(storage_writer.events))

{% for query in queries %}{% for timestampcolumn in query.TimestampColumns|sort(attribute='SQLColumn') %}
    # Test the first {{ query.Name|lower }} {{ timestampcolumn.SQLColumn }} event.
    test_event = storage_writer.events[{{ timestampcolumn.FirstEventPositionInEvents }}]
    expected_timestamp = timelib.Timestamp.CopyFromString(
        u'todo')
    self.assertEqual(test_event.timestamp, expected_timestamp)

    self.assertEqual(
      test_event.timestamp_desc, eventdata.EventTimestamp.CREATION_TIME)

    {% for datacolumn in query.Columns|sort(attribute='SQLColumn',case_sensitive=False)%}expected_{{datacolumn.ColumnAsSnakeCase()}} =
        u'{{ datacolumn.FirstDataForTimeEvent(column.SQLColumn)|wordwrap(width=64,wrapstring='\nu')|indent(8)}})'
    {% endfor %}
    {% for datacolumn in query.Columns|sort(attribute='SQLColumn',case_sensitive=False)%}self.assertEqual(test_event.{{ datacolumn.ColumnAsSnakeCase()}}, expected_{{datacolumn.ColumnAsSnakeCase()}})
    {% endfor %}

    expected_message = (
        u'{{ timestampcolumn.ExpectedMessage|wordwrap(width=64,wrapstring='\nu')|indent(8)}}...')
    expected_message_short = (
        u'{{ timestampcolumn.ExpectedMessageShort|wordwrap(width=64,wrapstring='\nu')|indent(8)}}')

    self._TestGetMessageStrings(
        test_event, expected_message, expected_message_short)
    {% set eventsBefore = eventsBefore + query.AmountEvents %}
{% endfor %}{% endfor %}

if __name__ == '__main__':
  unittest.main()
