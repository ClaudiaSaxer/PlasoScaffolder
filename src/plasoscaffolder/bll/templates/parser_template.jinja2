# -*- coding: utf-8 -*-
"""Parser for {{ plugin_name|lower|replace('_',' ')}} database.

SQLite database path:
#TODO: add database path
SQLite database Name: {{ database_name }}
"""

from dfdatetime import posix_time as dfdatetime_posix_time

from plaso.containers import time_events
from plaso.lib import eventdata
from plaso.parsers import sqlite
from plaso.parsers.sqlite_plugins import interface
{% for event in events %}
class {{ class_name }}{{ event.Name }}EventData(events.EventData)
  """{{ plugin_name|lower|replace('_',' ')}} {{event.Name|lower}} event data.

  TODO: add type and description of attributes
  Attributes:  {% for attribute in attributes %}

      {{ attribute }} (None): TODO{% endfor %}
  """

  DATA_TYPE = u'{{ plugin_name|lower|replace('_',':')}}:{{event.Name|lower}}'

  def __init__(self):
    """Initializes event data."""
    super({{ class_name }}{{ event.Name }}EventData(events.EventData), self).__init__(data_type=self.DATA_TYPE)
    {% for attribute in attributes %}self.{{ attribute }} = None{% endfor %}
{% endfor %}

class {{ class_name }}Plugin(interface.SQLitePlugin):
  """Parser for {{ class_name }}"""
  NAME = u'{{ plugin_name }}'
  DESCRIPTION = u'Parser for {{ class_name }}'
  QUERIES = [ {% for query in queries %}
    ((u'{{ query.Query|wordwrap(width=64,wrapstring="'\nu'")|indent(6)}})'),
     u'{{ query.Name }}'){% if not loop.last %},{% endif %}{% endfor %}]

  REQUIRED_TABLES = frozenset([
      {% for table in required_tables %}u'{{ table }}'{% if not loop.last %},
      {% endif %}{% endfor %}])

{% for query in queries %}
  def Parse{{ query.Name }}Row(self,  parser_mediator, row, Query=None, **unused_kwargs):
    """Parses a contact row from the database.

    Args:
      parser_mediator (ParserMediator): mediates interactions between parsers
          and other components, such as storage and dfvfs.
      row (sqlite3.Row): row resulting from Query.
      Query (Optional[str]): Query.
    """
    # Note that pysqlite does not accept a Unicode string in row['string'] and
    # will raise "IndexError: Index must be int or string".

    event_data = TwitterIOS{{ query.Name }}EventData()
    {% for column in query.Columns %}event_data.{{ column.SQLColumn }} = row['{{ column.ColumnAsSnakeCase() }}']
    {% endfor %}

    timestamp = row['TODO']
    if timestamp:
    # Convert the floating point value to an integer.
      timestamp = int(timestamp)
      date_time = dfdatetime_posix_time.PosixTime(timestamp=timestamp)
      # TODO: Add correct time field for None value.  Example: eventdata.EventTimestamp.UPDATE_TIME
      event = time_events.DateTimeValuesEvent(date_time, None)
      parser_mediator.ProduceEventWithEventData(event, event_data)
{% endfor %}


sqlite.SQLiteParser.RegisterPlugin({{ class_name }}Plugin)